<!-- Logback configuration. See http://logback.qos.ch/manual/index.html -->
<configuration scan="true" scanPeriod="10 seconds">

  <!--继承spring boot提供的logback配置-->
  <!--  <include resource="org/springframework/boot/logging/logback/base.xml" />-->
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

  <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

  <!--  &lt;!&ndash; 彩色日志 &ndash;&gt;-->
  <!--  &lt;!&ndash; 彩色日志依赖的渲染类 &ndash;&gt;-->
  <!--  <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>-->
  <!--  <conversionRule conversionWord="wex"-->
  <!--                  converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>-->
  <!--  <conversionRule conversionWord="wEx"-->
  <!--                  converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>-->

  <!--  &lt;!&ndash; 彩色日志格式 &ndash;&gt;-->
  <!--  <property name="CONSOLE_LOG_PATTERN"-->
  <!--            value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->
  <!--  <property name="FILE_LOG_PATTERN"-->
  <!--            value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } -&#45;&#45; [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->

  <!-- 控制台输出 -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
      <charset>UTF-8</charset> <!-- 此处设置字符集 -->
    </encoder>
    <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>debug</level>
    </filter>
  </appender>

  <!-- 时间滚动输出 level为 DEBUG 日志 -->
  <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH:-.}/logs/log_debug.log</file>
    <!--日志文件输出格式-->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset> <!-- 此处设置字符集 -->
    </encoder>
    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--
          归档的日志文件的路径，例如今天是2023-12-04日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
          而2023-12-04的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
      -->
      <fileNamePattern>${LOG_PATH:-.}/logs/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--
          除按日志记录之外，还配置了日志文件不能超过500M，若超过500M，日志文件会以索引0开始，
          命名日志文件，例如log-error-2023-12-04.0.log
      -->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>500MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!--日志文件保留天数-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <!-- 此日志文件只记录debug级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>debug</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 时间滚动输出 level为 INFO 日志 -->
  <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH:-.}/logs/log_info.log</file>
    <!--日志文件输出格式-->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset> <!-- 此处设置字符集 -->
    </encoder>
    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--
          归档的日志文件的路径，例如今天是2023-12-04日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
          而2023-12-04的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
      -->
      <fileNamePattern>${LOG_PATH:-.}/logs/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--
          除按日志记录之外，还配置了日志文件不能超过500M，若超过500M，日志文件会以索引0开始，
          命名日志文件，例如log-error-2023-12-04.0.log
      -->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>500MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!--日志文件保留天数-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <!-- 此日志文件只记录info级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>info</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 时间滚动输出 level为 WARN 日志 -->
  <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH:-.}/logs/log_warn.log</file>
    <!--日志文件输出格式-->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset> <!-- 此处设置字符集 -->
    </encoder>
    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--
          归档的日志文件的路径，例如今天是2023-12-04日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
          而2023-12-04的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
      -->
      <fileNamePattern>${LOG_PATH:-.}/logs/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--
          除按日志记录之外，还配置了日志文件不能超过500M，若超过500M，日志文件会以索引0开始，
          命名日志文件，例如log-error-2023-12-04.0.log
      -->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>500MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!--日志文件保留天数-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <!-- 此日志文件只记录warn级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>warn</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 时间滚动输出 level为 ERROR 日志 -->
  <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 正在记录的日志文件的路径及文件名 -->
    <file>${LOG_PATH:-.}/logs/log_error.log</file>
    <!--日志文件输出格式-->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset> <!-- 此处设置字符集 -->
    </encoder>
    <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--
          归档的日志文件的路径，例如今天是2023-12-04日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
          而2023-12-04的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
      -->
      <fileNamePattern>${LOG_PATH:-.}/logs/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--
          除按日志记录之外，还配置了日志文件不能超过500M，若超过500M，日志文件会以索引0开始，
          命名日志文件，例如log-error-2023-12-04.0.log
      -->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>500MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!--日志文件保留天数-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <!-- 此日志文件只记录ERROR级别的 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!--开发环境:打印控制台-->
  <springProfile name="dev">
    <property name="LOG_PATH" value="${LOG_PATH:-.}/starter/target"/>
    <root level="${LOG_LEVEL:-debug}">
      <appender-ref ref="CONSOLE"/>
      <appender-ref ref="DEBUG_FILE"/>
      <appender-ref ref="INFO_FILE"/>
      <appender-ref ref="WARN_FILE"/>
      <appender-ref ref="ERROR_FILE"/>
    </root>
  </springProfile>

  <!--测试环境:打印控制台和输出到文件-->
  <springProfile name="test">
    <root level="${LOG_LEVEL:-debug}">
      <appender-ref ref="DEBUG_FILE"/>
      <appender-ref ref="INFO_FILE"/>
      <appender-ref ref="WARN_FILE"/>
      <appender-ref ref="ERROR_FILE"/>
    </root>
  </springProfile>

  <!--生产环境:输出到文件-->
  <springProfile name="prod">
    <root level="${LOG_LEVEL:-info}">
      <appender-ref ref="DEBUG_FILE"/>
      <appender-ref ref="INFO_FILE"/>
      <appender-ref ref="WARN_FILE"/>
      <appender-ref ref="ERROR_FILE"/>
    </root>
  </springProfile>

</configuration>

